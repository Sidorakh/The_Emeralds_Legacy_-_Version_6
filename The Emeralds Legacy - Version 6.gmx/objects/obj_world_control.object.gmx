<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise the world drawing

//Initialise the vbuff format - used everywhere else
globalvar vertexBufferFormat;
vertex_format_begin();
vertex_format_add_position_3d();
vertex_format_add_colour();
vertex_format_add_textcoord();
vertexBufferFormat = vertex_format_end();

//Initialise the worlds vertex buffer - added to in alarm[0]
globalvar worldBasicVertex, worldBasicTexture;
worldBasicVertex = vertex_create_buffer();
worldBasicTexture = background_get_texture(bck_textures_global);

//Alarm[0] - where objects are added to the worlds vbuff
alarm[0] = 2;

//Prevent drawing for first step
visible = false;

//Shader intialisation
globalvar vertexShader,fragmentShader;
vertexShader = shd_basic;
fragmentShader = shd_basic;
offXUniform = shader_get_uniform(shd_fuckery,"offX");
offYUniform = shader_get_uniform(shd_fuckery,"offY");
offZUniform = shader_get_uniform(shd_fuckery,"offZ");
offXValue = 0;
offYValue = 0;
offZValue = 0;
dir = 0;
application_surface_draw_enable(false);

//Add shaders to map for easy access
shaders = ds_map_create();
shaders[? shd_basic] = "shd_basic";
shaders[? shd_intensify] = "shd_intensify";
shaders[? shd_abate] = "shd_abate";
shaders[? shd_bw] = "shd_bw";
shaders[? shd_high_contrast] = "shd_high_contrast";
shaders[? shd_matrix] = "shd_matrix";
shaders[? shd_invert] = "shd_invert";
shaders[? shd_sepia] = "shd_sepia";
shaders[? shd_fuckery] = "shd_fuckery";
shaders[? shd_earth_2] = "shd_earth_2";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>visible = true;
vertex_begin(worldBasicVertex,vertexBufferFormat);
with obj_world_object
{
    if modelType = colBlock
    {
        var dataArray = ds_list_create();
        dataArray[| 0] = x1;
        dataArray[| 1] = y1;
        dataArray[| 2] = z1;
        dataArray[| 3] = x2;
        dataArray[| 4] = y2;
        dataArray[| 5] = z2;
        var a = background_get_uvs(bck_textures_global);
        dataArray[| 6] = a[0] + texture_get_uv_xpos(tx,"bck_textures_global");                                                 //left
        dataArray[| 7] = a[1] + texture_get_uv_ypos(ty,"bck_textures_global");                                                 //top
        dataArray[| 8] = a[0] + texture_get_uv_xpos(tx,"bck_textures_global")+texture_get_uv_xpos(16,"bck_textures_global");     //right
        dataArray[| 9] = a[1] + texture_get_uv_ypos(ty,"bck_textures_global")+texture_get_uv_xpos(16,"bck_textures_global");     //bottom
        dataArray[| 10] = colour;
        vertex_buffer_box(worldBasicVertex,dataArray);
    }
    if modelType = colNone
    {
        
    }
}
vertex_end(worldBasicVertex)
vertex_freeze(worldBasicVertex);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(ord('1'))
{
    fragmentShader = shd_basic;
}
if keyboard_check_pressed(ord('2'))
{
    fragmentShader = shd_intensify;
}
if keyboard_check_pressed(ord('3'))
{
    fragmentShader = shd_abate;
}
if keyboard_check_pressed(ord('4'))
{
    fragmentShader = shd_bw;
}
if keyboard_check_pressed(ord('5'))
{
    fragmentShader = shd_high_contrast;
}
if keyboard_check_pressed(ord('6'))
{
    fragmentShader = shd_matrix;
}
if keyboard_check_pressed(ord('7'))
{
    fragmentShader = shd_invert;
}
if keyboard_check_pressed(ord('8'))
{
    fragmentShader = shd_sepia;
}
if keyboard_check_pressed(ord('9'))
{
    fragmentShader = shd_earth_2;
}
if keyboard_check_pressed(vk_f1)
{
    vertexShader = shd_basic;
}
if keyboard_check_pressed(vk_f2)
{
    vertexShader = shd_fuckery;
}
offXValue = dsin(dir++)*10;
offYValue = dsin(dir++)*10;
offZValue = dsin(dir++)*10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>application_surface_draw_enable(true);
vertex_delete_buffer(worldBasicVertex)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_white);
shader_set(fragmentShader);
draw_surface(application_surface,0,0);
shader_reset();
draw_set_color(c_white)
draw_rectangle(0,0,384,32,false);
draw_set_colour(c_black);
draw_text(4,4,"Current fragment shader: " + shaders[? fragmentShader]);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);
shader_set(vertexShader);
if vertexShader == shd_fuckery
{
    shader_set_uniform_f(offXUniform,offXValue);
    shader_set_uniform_f(offYUniform,offYValue);
    shader_set_uniform_f(offZUniform,offZValue);
}
vertex_submit(worldBasicVertex,pr_trianglelist,background_get_texture(bck_textures_global));
shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
